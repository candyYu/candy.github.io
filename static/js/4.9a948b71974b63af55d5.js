webpackJsonp([4],{Te8E:function(n,e,i){n.exports=i("YkG2")},YkG2:function(n,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("p",[n._v("##Spring Boot 入门，原理流程")]),n._v(" "),t("h3",[n._v("Profile-多环境配置")]),n._v(" "),t("pre",{pre:!0,attrs:{class:"hljs"}},[t("code",{attrs:{"v-pre":""}},[n._v("当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，并将日志写入日志文件，而开发的时候需要日志级别为DEBUG，日志输出到控制台即可。\n如果按照以前的做法，就是每次发布的时候替换掉配置文件，这样太麻烦了，Spring Boot的Profile就给我们提供了解决方案，命令带上参数就搞定。\n\n这里我们来模拟一下，只是简单的修改端口来测试\n在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识，比如：\n\napplication-dev.properties：开发环境\napplication-prod.properties：生产环境\n\n想要使用对应的环境，只需要在application.properties中使用spring.profiles.active属性来设置，值对应上面提到的{profile}，这里就是指dev、prod这2个。\n\n")])]),n._v(" "),t("h3",[n._v("启动原理解析")]),n._v(" "),t("p",[n._v("重要内容 是三个注解  @Configuration @EnableAutoConfiguration @ComponentScan")]),n._v(" "),t("h4",[n._v("@Configuration")]),n._v(" "),t("p",[n._v("JavaConfig形式的 Spring Ioc容器")]),n._v(" "),t("pre",{pre:!0,attrs:{class:"hljs"}},[t("code",{attrs:{"v-pre":""}},[n._v('xml配置形式\n\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"\n       default-lazy-init="true">\n    \x3c!--bean定义--\x3e\n\n   <bean id="mockService" class="..MockServiceImpl">\n       <propery name ="dependencyService" ref="dependencyService" />\n   </bean>\n\n   <bean id="dependencyService" class="DependencyServiceImpl"></bean>\n\n\n</beans>\n\n\nJavaConfig配置形式\n@Configuration\npublic class MockConfiguration{\n    @Bean\n    public MockService mockService(){\n        return new MockServiceImpl(dependencyService());\n    }\n\n    @Bean\n    public DependencyService dependencyService(){\n        return new DependencyServiceImpl();\n    }\n}\n\n')])]),n._v(" "),t("h4",[n._v("@ComponentScan")]),n._v(" "),t("p",[n._v("@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。")]),n._v(" "),t("h4",[n._v("@EnableAutoConfiguration")]),n._v(" "),t("p",[n._v("借助@Import的支持，收集和注册特定场景相关的bean定义。")]),n._v(" "),t("p",[n._v("@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。")]),n._v(" "),t("p",[n._v("@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器")]),n._v(" "),t("p",[n._v("@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！")]),n._v(" "),t("p",[t("img",{attrs:{src:i("UfW8"),alt:"EnableAutoConfiguration 组件关系图"}})]),n._v(" "),t("h4",[n._v("SpringApplication 执行流程")]),n._v(" "),t("pre",{pre:!0,attrs:{class:"hljs"}},[t("code",{attrs:{"v-pre":""}},[n._v("1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：\n\n>>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。\n>>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。\n>>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。\n>>推断并设置main方法的定义类。\n\n2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。\n\n\n3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。\n\n\n4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。\n\n\n5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。\n\n6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。\n\n\n7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。\n\n8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。\n\n9） 最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。\n\n10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。\n\n11） 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。\n\n12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。\n\n13） 正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）\n去除事件通知点后，整个流程如下：\n\n\n")])]),n._v(" "),t("p",[t("img",{attrs:{src:i("bJLN"),alt:"流程图"}})])])}]},o=i("VU/8")(null,t,!1,null,null,null);e.default=o.exports}});
//# sourceMappingURL=4.9a948b71974b63af55d5.js.map